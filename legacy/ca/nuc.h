// create pre-nuc sites and perform nucleation for ca
//  nuc.h
#pragma once
#include <random>

#include "grow.h"
#include "legacy/legacy_lattice/cellidx.h"
#include "legacy/legacy_lbm/legacy_lbmanager2d.h"
#include "lbm/unit_converter.h"
#include "legacy/legacy_utils/legacy_message.h"

template <typename T, typename LatStru>
class Nuc2D : public message {
 private:
  // Create_PreNucs
  T Accum_Bulk_Sites;
  T Accum_Surf_Sites;
  // Create_PreNucs: normal_distribution
  // use lattice unit, need to be converted by UnitConverter first
  T DT_Mean_Bulk;
  T DT_Std_Bulk;
  T DT_Mean_Surf;
  T DT_Std_Surf;
  T NucDens_Surf;
  T NucDens_Bulk;

// parallelized Pre-Nuc and Nuc
#ifdef _NUC_P
  // divide Nucs into Nucs_Th
  std::vector<std::vector<gcell2D<T>>> Nucs_Th;
  // divide PreNucs and cooresponding DTCrit
  std::vector<std::vector<int>> PreNucs_Th;
  std::vector<std::vector<T>> DTCrit_Th;
#else
  // todo: PreNucs and DTCrit may be removed, combine create_preNucs and
  // nucleation
  // store Pre-Nuc sites by Cell Id
  std::vector<int> PreNucs;
  // critical undercooling for PreNucs
  std::vector<T> DTCrit;
#endif

  GandinConverter<T>& ConvCA;
  CAGField2D<T>& CA;
  Geometry2DLegacy<T>& Geo;

  // seed for random number generator
  // call: rd() or rd = std::random_device()
  std::random_device rd;
  // random number generator
  // call: gen(rd()) or gen = std::mt19937(rd())
  std::mt19937 gen;

 public:
  Nuc2D(GandinConverter<T>& convca, LBManager2D<T>& lbm, CAGField2D<T>& ca);
  ~Nuc2D();
  // create PreNucs on remain cells
  // critical undercooling of PreNucs generated by normal distribution
  void Create_PreNucs(std::vector<int>& Bulks, std::vector<int>& Surfs);
  // single thread or serialised Create_PreNucs
  void create_s(std::vector<int>& prenucs, std::vector<T>& dt_critic,
                std::vector<int>& remains, int count,
                std::default_random_engine& engine,
                std::normal_distribution<T>& gauss);

  // CAState and GeoFlag will be modified once nucleated
  void Nucleation(std::vector<gcell2D<T>>& Nucs, LBManager2D<T>& LBM);
  //  single thread or serialised nucleation
  void nucleation_s(std::vector<gcell2D<T>>& nucs, LBManager2D<T>& lbm,
                    std::vector<int>& prenucs, std::vector<T>& dt_critic);

  /*test and study*/
  void Single_Nucleation(int latx, int laty, T orine,
                         std::vector<gcell2D<T>>& nucs);

  // get
};
